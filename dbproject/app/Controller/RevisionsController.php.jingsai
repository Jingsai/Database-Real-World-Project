<?php
class RevisionsController extends AppController{
	

	public $components=array('Search.Prg','Paginator');


	public $uses = array(
			'Revision',
			'Tagnumber','Producttype','Country','Tagmembername','Appliedfo');
	

	public $paginate = array(

		'Revision' => array(
                	'limit' => 2,
                	'order' => array(
                	'Revision.no' => 'asc'
                	)
		),
		
		'Tagnumber' => array(
			'limit' => 2,
			'maxLimit' => 100
		)
        );

	public function index()
	{
	
		$datas = $this->Paginator->paginate();	
		$this->set('revisions',$datas);	
		
		$params = $this->request->data;

		if (!empty($params))
		{		
			$no = $params['Revision']['no'];
			$Obsolete = $params['Revision']['Obsolete'];
			$Name = $params['Revision']['Name'];

			if (!empty($Obsolete) && !empty($Name))
			{
				$datas=$this->Revision->find('all', array(
					'contain' => array('Tagmembername'),
			     'conditions' => array('Revision.revision_obsolete' => $params['Revision']['Obsolete'], 
			    	                    'Tagmembername.Name' => $params['Revision']['Name'])));
			}
			else if (!empty($Obsolete) && !empty($no))
			{
				$datas=$this->Revision->find('all', array(
					'contain' => array('Tagmembername'),
			     'conditions' => array('Revision.revision_obsolete' => $params['Revision']['Obsolete'], 
			     	                   'Revision.no' => $params['Revision']['no'])));
			}
			else if (!empty($no))
			{
				$datas=$this->Revision->find('all', array(
					'contain' => array('Tagmembername'),
			     'conditions' => array('Revision.no' => $params['Revision']['no'])));
			}

			$this->set('revisions',$datas);	
		}
	}

	public function getProMulti($prottype=NULL)
	{
		$promulti=$this->Producttype->findByProducttype($prottype);
		return $promulti['Producttype']['Multiplyer'];

	}

      public function view( $id = null , $no = null){
                if (!$id) {
                        throw new NotFoundException(__('Invalid post'));
                }

                $revisions= $this->Revision->findById($id);
                $tagnumbers = $this->Tagnumber->findByNo($no);
		$countries=$this->Country->find('all');
		$products=$this->Producttype->find('all');
		$applied=$this->Appliedfo->findByNo($no);
		if(empty($tagnumbers))
		{	
             		$revisions['Revision']['Description'] = ""; 
	        	$revisions['Revision']['SubCategory'] = "";	
		}
		else
		{	
             		$revisions['Revision']['Description'] = $tagnumbers['Tagnumber']['DESCRIPTION']; 
	       		$revisions['Revision']['SubCategory'] = $tagnumbers['Tagnumber']['SubCategory'];	
		}
		$revisions['Revision']['installcost']=$revisions['Revision']['material']+$revisions['Revision']['LABOR']+$revisions['Revision']['Engineering']; 
		$revisions['Revision']['hvlusa']=$revisions['Revision']['installcost']*$countries[0]['Country']['USA']*$this->getProMulti('HVL');
		$revisions['Revision']['hvlcanada']=$revisions['Revision']['installcost']*$countries[0]['Country']['Canada']*$this->getProMulti('HVL');
		$revisions['Revision']['hvlmexico']=$revisions['Revision']['installcost']*$countries[0]['Country']['Mexico']*$this->getProMulti('HVL');
		
		$revisions['Revision']['hvlccusa']=$revisions['Revision']['installcost']*$countries[0]['Country']['USA']*$this->getProMulti('HVL/CC');
		$revisions['Revision']['hvlccanada']=$revisions['Revision']['installcost']*$countries[0]['Country']['Canada']*$this->getProMulti('HVL/CC');
		$revisions['Revision']['hvlccmexico']=$revisions['Revision']['installcost']*$countries[0]['Country']['Mexico']*$this->getProMulti('HVL/CC');
		
		$revisions['Revision']['metalusa']=$revisions['Revision']['installcost']*$countries[0]['Country']['USA']*$this->getProMulti('Metal Clad');
		$revisions['Revision']['metalcanada']=$revisions['Revision']['installcost']*$countries[0]['Country']['Canada']*$this->getProMulti('Metal Clad');
		$revisions['Revision']['metalmexico']=$revisions['Revision']['installcost']*$countries[0]['Country']['Mexico']*$this->getProMulti('Metal Clad');

		
		$revisions['Revision']['mvusa']=$revisions['Revision']['installcost']*$countries[0]['Country']['USA']*$this->getProMulti('MVMCC');
		$revisions['Revision']['mvcanada']=$revisions['Revision']['installcost']*$countries[0]['Country']['Canada']*$this->getProMulti('MVMCC');
		$revisions['Revision']['mvmexico']=$revisions['Revision']['installcost']*$countries[0]['Country']['Mexico']*$this->getProMulti('MVMCC');
		$revisions['Revision']['appliedfono']=$applied['Appliedfo']['FO Number Applied To'];
		$revisions['Revision']['notesengineer']=$applied['Appliedfo']['Notes to Next Engineer'];
	//	print_r($revisions['Revision']['installcost']*$countries['Country']['USA']*$this->getProMulti('HVL'));	
		//print_r($revisions);
		//print_r($this->Revision->findByNo(5660));
                //print "<br>";
		//print_r($tagnumbers);
		$tag=$this->Tagmembername->findById($revisions['Revision']['tagmembername_id']);
		$revisions['Revision']['tagmembername']=$tag['Tagmembername']['Name'];
		App::uses('CakeTime','Utility');
		$edate=$revisions['Revision']['DATE'];
		$emonth=$revisions['Revision']['price expiration'];

		$revisions['Revision']['DATE']=CakeTime::format($edate);
		$revisions['Revision']['expprice']=CakeTime::format($edate.'+'.$emonth.'months');
		
		
	   if (!$revisions) {
            throw new NotFoundException(__('Invalid post'));
        }
        
		if ($this->request->is(array('post','put')))
		{
		
			$this->Revision->id=$id;			
		}

		if (!$this->request->data )
		{
		 	$this->request->data = $revisions;	
			//print_r($this->request->data);								
			//$tagnumbers = $this->Tagnumber->findByNo($no);
		 	//$this->request->data = $tagnumbers;
			//print_r($this->request->data = $tagnumbers);
		} 
	//	$this->set('producttypes',$products);
		
	}
         public function edit($id=null) 
	{	
			
		//$this->set('revisions',$this->Revision->findByNo(5500));
		if(!$id)
			throw new NotFoundException(_('Invalid post'));

		$revisions = $this->Revision->findById($id);
		if(!$revisions)
			throw new NotFoundException(_('Invalid Post'));

		if ($this->request->is(array('post','put')))
		{
			$this->Revision->id=$id;			
			if($this->Revision->save($this->request->data))
			{
				
				$this->Session->setFlash(__('The user has been updated'));
//				return $this->redirect(array('action'=>'index'));
				$this->redirect(array('action'=>'edit',$id));
			}
		//	else
		//	{
			$this->Session->setFlash(__('Unable to update your post.'));
		//	}
			
		}
		if (!$this->request->data )
		{
		 	$this->request->data = $revisions;
		} 
        }
//XIXXI

//Jingsai allow action or deny action
    public function isAuthorized($user) {
        $group = json_decode(AuthComponent::user('group'));
        // $group = array(0 => 'tagmemebers')
        if (!empty($group)) {
        	if (in_array("tagmembers", $group) || in_array("oe", $group)) {
           		 //admin can not add users;
            	//if($this->request->params['action']!='add'){
            		//return true;
            	//}
            	return true;
            }
            if (in_array("oe", $group)) {
                //oe can not edit
            	if ($this->request->params['action'] != 'edit') {
            		return true;
            	}
            }

        }
            $this->Session->setFlash(__('Action deny.'));
            $this->redirect($this->Auth->redirectUrl());
            return false;      
    }

	 public function beforeFilter() {
        parent::beforeFilter();
        if(AuthComponent::user('group')){
            $group = json_decode(AuthComponent::user('group'));
            if (in_array("tagmembers", $group) || in_array("oe", $group)){
                $this->Auth->allow('edit','index');
            }
            if(in_array("user", $group)){
                $this->Auth->allow('index');
            }
        }
    }
	










}



